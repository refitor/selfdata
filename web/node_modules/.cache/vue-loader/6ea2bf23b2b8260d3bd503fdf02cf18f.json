{"remainingRequest":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js??vue-loader-options!/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/src/pages/editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/src/pages/editor.vue","mtime":1652424118192},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1651945230823},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js","mtime":1651945387533}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}