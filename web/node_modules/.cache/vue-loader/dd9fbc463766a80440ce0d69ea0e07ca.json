{"remainingRequest":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js??vue-loader-options!/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/src/pages/editor.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/src/pages/editor.vue","mtime":1652424118192},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":1651945326012},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/loaders/stylePostLoader.js","mtime":1651945387601},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1651945377225},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js","mtime":1651945212459},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1651945230823},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js","mtime":1651945387533}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5leHBsb3JlcnsKICAgIGJhY2tncm91bmQtY29sb3I6ICNlYmU5ZTc7Cn0K"},{"version":3,"sources":["editor.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"editor.vue","sourceRoot":"src/pages","sourcesContent":["<style lang=\"less\">\n.explorer{\n    background-color: #ebe9e7;\n}\n</style>\n<template>\n  <div>\n    <!-- <span style=\"top: 20px; position: absolute; color: #fc3b00;\">{{$t('lang.editorNotify')}}</span> -->\n    <Editor v-show=\"showEditor === true\" ref=\"fileEditor\"\n      :content=\"content\"\n      :fontSize=\"14\"\n      :height=\"pageHeight() - 91 + 'px'\"\n      :lang=\"lang\"\n      theme=\"chrome\"\n      :width=\"pageWidth()\"\n      :options=\"editorOptions\"\n      :readonly=\"readonly === 'true'\"\n      @init=\"editorInit\"\n      @onChange=\"editorChange\"\n      @onInput=\"editorInput\"\n      @onFocus=\"editorFocus\"\n      @onBlur=\"editorBlur\"\n      @onPaste=\"editorPaste\"\n    ></Editor>\n    <object class=\"explorer\" v-if=\"showEditor === false\" :data=\"explorerUrl\" :width=\"pageWidth()\" :height=\"pageHeight() - 70 + 'px'\" />\n  </div>\n</template>\n\n<script>\nimport Editor from 'vue2x-ace-editor';\nimport {webResponse} from '../toolchain/help.js';\nexport default {\n  name: \"editor\",\n  data() {\n        return {\n            lang: 'text',\n            content: '',\n            showEditor: false,\n            explorerUrl: '',\n\n            fType: '',\n            from: '',\n            readonly: '',\n            filePath: '',\n\n            editorOptions: {  // 设置代码编辑器的样式\n                enableBasicAutocompletion: true,\n                enableSnippets: true,\n                enableLiveAutocompletion: true,\n                tabSize: 2,\n                fontSize: 16,\n                showPrintMargin: false   //去除编辑器里的竖线\n            }\n        };\n    },\n    props: {\n        params: {\n            type: Object,\n            default: {},\n        }\n    },\n    mounted() {\n        if (this.params !== undefined && this.params !== null) {\n            if (this.params['from'] !== undefined) this.from = this.params['from'];\n            if (this.params['fType'] !== undefined) this.fType = this.params['fType'];\n            if (this.params['filePath'] !== undefined) this.filePath = this.params['filePath'];\n            if (this.params['readonly'] !== undefined) this.readonly = this.params['readonly'];\n        }\n\n        // InitFooter();   \n        this.showEditor = this.fType.indexOf('text/plain') !== -1;     \n        if (this.filePath !== '' && this.showEditor === true) {\n            var msgobj = this.$Message;       \n            let updateContent = this.updateContent;\n            let getUrl = \"/api/file/view?readonly=\" + this.readonly + \"&filepath=\" + this.filePath + \"&ftype=\" + this.fType + '&from=' + this.from;\n            this.httpGet(getUrl, function(response){\n                updateContent(response.data)\n            })\n        } \n        if (this.filePath !== '' && this.showEditor === false) {\n            let explorerUrl = '/api/file/view?readonly=true&filepath=' + this.filePath + \"&ftype=\" + this.fType + '&from=' + this.from;\n            this.explorerUrl = explorerUrl;\n        }\n    },\n    methods: {\n        isImg(){\n            let isVideo = this.filePath.indexOf('.mp4') > 0 || name.indexOf('.mov') > 0;\n            let isAudio = this.filePath.indexOf('.mp3') > 0 || name.indexOf('.wav') > 0;\n            let isImg = this.filePath.indexOf('.png') > 0 || this.filePath.indexOf('.jpg') > 0 || this.filePath.indexOf('.jpeg') > 0 || this.filePath.indexOf('.gif') > 0 || this.filePath.indexOf('.bmp') > 0;\n            return isImg || isVideo || isAudio;\n        },\n        getFileType(filename){\n            if(!filename || typeof filename != 'string'){\n                return ''\n            };\n            let a = filename.split('').reverse().join('');\n            let b = a.substring(0,a.search(/\\./)).split('').reverse().join('');\n            return b\n        },\n        pageWidth(){ //函数：获取尺寸\n            //获取浏览器窗口高度\n            var winWidth=0;\n            if (window.innerWidth){\n                winWidth = window.innerWidth;\n            }\n            else if ((document.body) && (document.body.clientWidth)){\n                winWidth = document.body.clientWidth;\n            }\n            //通过深入Document内部对body进行检测，获取浏览器窗口高度\n            if (document.documentElement && document.documentElement.clientWidth){\n                winWidth = document.documentElement.clientWidth;\n            }\n            //DIV高度为浏览器窗口的高度\n            //document.getElementById(\"test\").style.height= winHeight +\"px\";\n            //DIV高度为浏览器窗口高度的一半\n            // document.getElementById(\"test\").style.height= winHeight/2 +\"px\";\n            return winWidth;\n       },\n        pageHeight(){ //函数：获取尺寸\n            //获取浏览器窗口高度\n            var winHeight=0;\n            if (window.innerHeight){\n                winHeight = window.innerHeight;\n            }\n            else if ((document.body) && (document.body.clientHeight)){\n                winHeight = document.body.clientHeight;\n            }\n            //通过深入Document内部对body进行检测，获取浏览器窗口高度\n            if (document.documentElement && document.documentElement.clientHeight){\n                winHeight = document.documentElement.clientHeight;\n            }\n            //DIV高度为浏览器窗口的高度\n            //document.getElementById(\"test\").style.height= winHeight +\"px\";\n            //DIV高度为浏览器窗口高度的一半\n            // document.getElementById(\"test\").style.height= winHeight/2 +\"px\";\n            return winHeight;\n        },\n        updateContent(data) {\n            if (typeof(data) != 'string') {\n                data = JSON.stringify(data, null, 2)\n            }\n            this.content = data;\n        },\n        getContent() {\n            return this.$refs.fileEditor.getValue();\n        },\n        editorInit() {\n            require(\"brace/ext/language_tools\");\n            require(`brace/mode/text`);\n            require(`brace/snippets/text`);\n            require(`brace/theme/chrome`);\n            \n            require('brace/mode/json')    //language\n            require('brace/mode/less')\n            require('brace/mode/yaml')\n            require('brace/snippets/json') //snippet\n        },\n        editorChange(editor) {\n            // console.log(\"changed\", editor.getValue());\n        },\n        editorInput(editor) {\n            // console.log(\"input\", editor.getValue());\n        },\n        editorFocus(editor) {\n            // console.log(\"focus\", editor);\n        },\n        editorBlur(editor) {\n            // console.log(\"blur\", editor);\n        },\n        editorPaste(editor) {\n            // console.log(\"pase\", editor);\n        },\n        httpGet(url, onResponse, onPanic) {\n            this.$axios.get(url)\n            .then(function (response) {\n                if (onResponse !== undefined && onResponse !== null) onResponse(response);\n            })\n            .catch(function (response) {\n                if (onPanic !== undefined && onPanic !== null) onPanic(response);\n            });\n        },\n        httpPost(url, formdata, onResponse, onPanic) {\n            this.$axios.post(url, formdata)\n            .then(function (response) {\n                if (onResponse !== undefined && onResponse !== null) onResponse(response);\n            })\n            .catch(function (response) {\n                if (onPanic !== undefined && onPanic !== null) onPanic(response);\n            });\n        }\n    },\n    components:{\n        Editor\n    }\n};\n</script>"]}]}