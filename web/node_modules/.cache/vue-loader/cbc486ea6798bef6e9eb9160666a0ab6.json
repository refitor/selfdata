{"remainingRequest":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js??vue-loader-options!/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue2x-ace-editor@0.1.3@vue2x-ace-editor/editor/src/split.vue?vue&type=style&index=0&id=f18232c8&scoped=true&lang=css&","dependencies":[{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue2x-ace-editor@0.1.3@vue2x-ace-editor/editor/src/split.vue","mtime":1651945186139},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":1651945326012},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/loaders/stylePostLoader.js","mtime":1651945387601},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1651945377225},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1651945230823},{"path":"/home/jery/Desktop/dev/rshub/product/rsapp/selfdata/web/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js","mtime":1651945387533}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5lZGl0b3ItY29udGFpbmVyIHsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0K"},{"version":3,"sources":["split.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4PA;AACA;AACA","file":"split.vue","sourceRoot":"node_modules/_vue2x-ace-editor@0.1.3@vue2x-ace-editor/editor/src","sourcesContent":["<template>\r\n  <div class=\"editor-container\" :style=\"{width:cW,height:cH}\">\r\n    <slot></slot>\r\n    <div ref=\"editor\" :class=\"className\" :style=\"{width:cW,height:cH}\"></div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport ace from \"brace\";\r\nimport \"brace/ext/split\";\r\nconst { Split } = ace.acequire(\"ace/split\");\r\nexport default {\r\n  name: \"VueSplitEditor\",\r\n  props: {\r\n    lang: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    theme: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    fontSize: {\r\n      type: Number,\r\n      default: 12\r\n    },\r\n    content: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    width: {\r\n      type: String,\r\n      default: \"100%\"\r\n    },\r\n    height: {\r\n      type: String,\r\n      default: \"100%\"\r\n    },\r\n    className: {\r\n      type: String,\r\n      default: \"vue-ace-editor\"\r\n    },\r\n    options: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    orientation: {\r\n      type: String,\r\n      default: \"beside\"\r\n    },\r\n    splits: {\r\n      type: Number,\r\n      default: 2\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      editor: null,\r\n      split: null\r\n    };\r\n  },\r\n  computed: {\r\n    cH() {\r\n      if (typeof this.height === \"number\") return this.height + \"px\";\r\n      if (typeof this.height === \"string\") return this.height;\r\n      return \"\";\r\n    },\r\n    cW() {\r\n      if (typeof this.width === \"number\") return this.width + \"px\";\r\n      if (typeof this.width === \"string\") return this.width;\r\n      return \"\";\r\n    }\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.editor = ace.edit(this.$refs.editor);\r\n      this.$emit(\"init\", this.editor);\r\n      this.split = new Split(\r\n        this.editor.container,\r\n        `ace/theme/${this.theme}`,\r\n        this.splits\r\n      );\r\n      this.editor.env.split = this.split;\r\n      this.splitEditor = this.split.getEditor(0);\r\n      this.availableOptions = this.splitEditor.$options;\r\n      this.split.forEach(editor => {\r\n        editor.$blockScrolling = Infinity;\r\n        editor.on(\"focus\", this.onFocus);\r\n        editor.on(\"blur\", this.onBlur);\r\n        editor.on(\"copy\", this.onCopy);\r\n        editor.on(\"paste\", this.onPaste);\r\n        editor.on(\"change\", this.onChange);\r\n        editor.on(\"input\", this.onInput);\r\n      });\r\n      this.setMode();\r\n      this.setTheme();\r\n      this.setFontSize();\r\n      this.setOptions();\r\n      this.setValue();\r\n      this.setReadonly();\r\n      this.setOrientation();\r\n    },\r\n    setMode() {\r\n      this.split.forEach(editor => {\r\n        editor.getSession().setMode(`ace/mode/${this.lang}`);\r\n      });\r\n      return this.split;\r\n    },\r\n    setTheme() {\r\n      this.split.forEach(editor => {\r\n        editor.setTheme(`ace/theme/${this.theme}`);\r\n      });\r\n      return this.split;\r\n    },\r\n    setFontSize() {\r\n      this.split.forEach(editor => {\r\n        editor.setFontSize(this.fontSize);\r\n      });\r\n      return this.split;\r\n    },\r\n    setValue() {\r\n      this.split.forEach((editor, index) => {\r\n        editor.getSession().setValue(this.content[index] || \"\");\r\n      });\r\n      return this.split;\r\n    },\r\n    getValue() {\r\n      let ret = []\r\n      this.split.forEach(editor => {\r\n        ret.push(editor.getValue());\r\n      });\r\n      return ret;\r\n    },\r\n    setOptions() {\r\n      this.split.forEach(editor => {\r\n        if (Object.keys(this.options).length === 0) return;\r\n        Object.keys(this.options).forEach(k => {\r\n          this.availableOptions.hasOwnProperty(k)\r\n            ? editor.setOption(k, this.options[k])\r\n            : console.warn(\r\n                `VueAce: editor option ${k} was activated but not found. Did you need to import a related tool or did you possibly mispell the option?`\r\n              );\r\n        });\r\n      });\r\n      return this.split;\r\n    },\r\n    setReadonly() {\r\n      this.split.forEach(editor => {\r\n        editor.setReadOnly(this.readonly);\r\n      });\r\n      return this.split;\r\n    },\r\n    setCompleteData(data) {\r\n      ace.acequire(\"ace/ext/language_tools\").addCompleter({\r\n        getCompletions: function(editor, session, pos, prefix, callback) {\r\n          return callback(null, data);\r\n        }\r\n      });\r\n    },\r\n    onFocus() {\r\n      this.$emit(\"onFocus\", this.split);\r\n    },\r\n    onBlur() {\r\n      this.$emit(\"onBlur\", this.split);\r\n    },\r\n    onChange(obj) {\r\n      obj = Object.assign(obj, {\r\n        value: this.getValue(),\r\n        split: this.split\r\n      });\r\n      this.$emit(\"onChange\", obj);\r\n    },\r\n    onInput() {\r\n      this.$emit(\"onInput\", this.split);\r\n    },\r\n    onCopy(txt) {\r\n      this.$emit(\"onCopy\", txt);\r\n    },\r\n    onPaste(obj) {\r\n      this.$emit(\"onPaste\", obj);\r\n    },\r\n    resize() {\r\n      this.split.forEach(editor=>{\r\n        editor.resize();\r\n      });\r\n      return this.split;\r\n    },\r\n    setRange(startRow, startCol, endRow, endCol) {\r\n      let Range = ace.acequire(\"ace/range\").Range;\r\n      return new Range(startRow, startCol, endRow, endCol);\r\n    },\r\n    setOrientation() {\r\n      this.editor.env.split.setOrientation(\r\n        this.editor.env.split[this.orientation.toUpperCase()]\r\n      );\r\n    },\r\n    setSplits() {\r\n      this.editor.env.split.setSplits(this.splits);\r\n      this.split.forEach(editor => {\r\n        editor.$blockScrolling = Infinity;\r\n        editor.on(\"focus\", this.onFocus);\r\n        editor.on(\"blur\", this.onBlur);\r\n        editor.on(\"copy\", this.onCopy);\r\n        editor.on(\"paste\", this.onPaste);\r\n        editor.on(\"change\", this.onChange);\r\n        editor.on(\"input\", this.onInput);\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  beforeDestroy: function() {\r\n    this.editor.destroy();\r\n    this.editor.container.remove();\r\n  },\r\n  watch: {\r\n    fontSize() {\r\n      this.setFontSize();\r\n    },\r\n    content() {\r\n      this.setValue();\r\n    },\r\n    theme() {\r\n      this.setTheme();\r\n    },\r\n    lang() {\r\n      this.setMode();\r\n    },\r\n    height() {\r\n      this.$nextTick(() => {\r\n        this.resize();\r\n      });\r\n    },\r\n    width() {\r\n      this.$nextTick(() => {\r\n        this.resize();\r\n      });\r\n    },\r\n    orientation() {\r\n      this.setOrientation();\r\n    },\r\n    splits() {\r\n      this.setSplits();\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.editor-container {\r\n  position: relative;\r\n}\r\n</style>\r\n\r\n"]}]}